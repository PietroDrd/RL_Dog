####### SEQUENTIAL TRAINING ####### 

    @configclass
    class PolicyCfg(ObsGroup):
        """Observations for policy group."""

        ### Command Input (What we requires to do)
        velocity_commands = ObsTerm(func=constant_commands)
        
        ### Robot State (What we have)
        base_ang_vel = ObsTerm(func=mdp.base_ang_vel, noise=Unoise(n_min=-0.2, n_max=0.2))
        # projected_gravity = ObsTerm(
        #     func=mdp.projected_gravity, # base frame!
        #     noise=Unoise(n_min=-0.05, n_max=0.05),
        # )
        # accel_base = ObsTerm(
        #     func=my_body_acc_b,   # world frame!
        #     params={"asset_cfg": SceneEntityCfg("robot", body_names=["base"])},
        #     noise=Unoise(n_min=-0.1, n_max=0.1),
        # )

        imu_like_data = ObsTerm(
            func=imu_acc_b,
            params={"asset_cfg": SceneEntityCfg("robot", body_names=["base"])},
            noise=Unoise(n_min=-0.1, n_max=0.1),
        ) 

        #TO DO by prof
        # sum (prj_gravity + accel_base) = like IMU
        # test the trained policy +  controls --> are disturbaances !!! (eg: go2 sim.py)
            
        ### Joint state 
        joint_pos = ObsTerm(func=mdp.joint_pos_rel, noise=Unoise(n_min=-0.01, n_max=0.01))
        joint_vel = ObsTerm(func=mdp.joint_vel_rel, noise=Unoise(n_min=-0.10, n_max=0.10))

        actions   = ObsTerm(func=mdp.last_action)

        def __post_init__(self):
            self.enable_corruption = True   # IDK
            self.concatenate_terms = True   # IDK
